.TH "include/smax-postgres.h" 3 "Version v0.9" "smax-postgres" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/smax-postgres.h
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBlogger_properties\fP"
.br
.ti -1c
.RI "struct \fBVariable\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCACHE_SIZE\fP   200000"
.br
.RI "Maximum number of cached table ids\&. "
.ti -1c
.RI "#define \fBCONNECT_RETRY_ATTEMPTS\fP   60"
.br
.RI "Number of retry attempts before giving up\&.\&.\&.\&. "
.ti -1c
.RI "#define \fBCONNECT_RETRY_SECONDS\fP   60"
.br
.RI "Seconds between trying to reconnect to server\&. "
.ti -1c
.RI "#define \fBDAY\fP   ( 24 * \fBHOUR\fP )"
.br
.RI "(s) seconds in a day "
.ti -1c
.RI "#define \fBDEFAULT_MAX_AGE\fP   ( 90 * \fBDAY\fP )"
.br
.RI "(s) Default value for the max age of variables to log "
.ti -1c
.RI "#define \fBDEFAULT_MAX_SIZE\fP   1024"
.br
.RI "(bytes) Default maximum binary data size of variables to log "
.ti -1c
.RI "#define \fBDEFAULT_SQL_DB\fP   'engdb'"
.br
.RI "The default SQL database name to log to\&. "
.ti -1c
.RI "#define \fBDEFAULT_SQL_SERVER\fP   'localhost'"
.br
.RI "The default host name / IP of the SQL server\&. "
.ti -1c
.RI "#define \fBDEFAULT_SQL_USER\fP   'loggerserver'"
.br
.RI "The default SQL user name for the logger\&. "
.ti -1c
.RI "#define \fBdprintf\fP   if(\fBdebug\fP) printf"
.br
.RI "Macro for printing debug messages\&. "
.ti -1c
.RI "#define \fBERROR_EXIT\fP   (\-1)"
.br
.RI "Exit code in case of an error\&. "
.ti -1c
.RI "#define \fBERROR_RETURN\fP   (\-1)"
.br
.RI "Function return value in case of an error\&. "
.ti -1c
.RI "#define \fBFALSE\fP   0"
.br
.RI "Boolean FALSE (0) if not already defined\&. "
.ti -1c
.RI "#define \fBHOUR\fP   ( 60 * \fBMINUTE\fP )"
.br
.RI "(s) seconds in an hour "
.ti -1c
.RI "#define \fBIDLE_STATE\fP   'IDLE'"
.br
.RI "systemd state to report when idle\&. "
.ti -1c
.RI "#define \fBMINUTE\fP   60"
.br
.RI "(s) seconds in a minute "
.ti -1c
.RI "#define \fBSMAXPQ_DEFAULT_CONFIG\fP   '/etc/smax\-postgress\&.cfg'"
.br
.RI "Default configuration file name\&. "
.ti -1c
.RI "#define \fBSMAXPQ_MAJOR_VERSION\fP   0"
.br
.RI "API major version\&. "
.ti -1c
.RI "#define \fBSMAXPQ_MINOR_VERSION\fP   9"
.br
.RI "API minor version\&. "
.ti -1c
.RI "#define \fBSMAXPQ_PATCHLEVEL\fP   0"
.br
.RI "Integer sub version of the release\&. "
.ti -1c
.RI "#define \fBSMAXPQ_RELEASE_STRING\fP   '\-devel'"
.br
.RI "Additional release information in version, e\&.g\&. '-1', or '-rc1'\&. "
.ti -1c
.RI "#define \fBSMAXPQ_VERSION_STRING\fP"
.br
.ti -1c
.RI "#define \fBSUCCESS_RETURN\fP   0"
.br
.RI "Function return value for successful completion\&. "
.ti -1c
.RI "#define \fBTIMESCALE\fP   '3 days'"
.br
.RI "Default TimescaleDB timescale\&. "
.ti -1c
.RI "#define \fBTRUE\fP   1"
.br
.RI "Boolean TRUE (1) if not already defined\&. "
.ti -1c
.RI "#define \fBWEEK\fP   ( 7 * \fBDAY\fP )"
.br
.RI "(s) seconds in a week "
.ti -1c
.RI "#define \fBYEAR\fP   ( 366 * \fBDAY\fP )"
.br
.RI "(s) seconds in a leap year (366 days) "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBdeleteVars\fP (const char *pattern)"
.br
.ti -1c
.RI "void \fBdestroyVariable\fP (\fBVariable\fP *u)"
.br
.ti -1c
.RI "\fBlogger_properties\fP * \fBgetLogProperties\fP (const char *id)"
.br
.ti -1c
.RI "int \fBgetMaxLogSize\fP ()"
.br
.ti -1c
.RI "int \fBgetSampleCount\fP (const \fBVariable\fP *u)"
.br
.ti -1c
.RI "const char * \fBgetSMAXServerAddress\fP ()"
.br
.ti -1c
.RI "int \fBgetSnapshotInterval\fP ()"
.br
.ti -1c
.RI "const char * \fBgetSQLAuth\fP ()"
.br
.ti -1c
.RI "const char * \fBgetSQLDatabaseName\fP ()"
.br
.ti -1c
.RI "const char * \fBgetSQLServerAddress\fP ()"
.br
.ti -1c
.RI "const char * \fBgetSQLUserName\fP ()"
.br
.ti -1c
.RI "int \fBgetUpdateInterval\fP ()"
.br
.ti -1c
.RI "int \fBinitCollector\fP ()"
.br
.ti -1c
.RI "int \fBinsertQueue\fP (\fBVariable\fP *u)"
.br
.ti -1c
.RI "int \fBisLogging\fP (const char *id, double updateTime)"
.br
.ti -1c
.RI "\fBboolean\fP \fBisUseHyperTables\fP ()"
.br
.ti -1c
.RI "int \fBparseConfig\fP (const char *filename)"
.br
.ti -1c
.RI "int \fBsetSMAXServerAddress\fP (const char *addr)"
.br
.ti -1c
.RI "int \fBsetSQLAuth\fP (const char *passwd)"
.br
.ti -1c
.RI "int \fBsetSQLDatabaseName\fP (const char *name)"
.br
.ti -1c
.RI "int \fBsetSQLServerAddress\fP (const char *addr)"
.br
.ti -1c
.RI "int \fBsetSQLUserName\fP (const char *name)"
.br
.ti -1c
.RI "int \fBsetupDB\fP (const char *name, const char *passwd)"
.br
.ti -1c
.RI "void \fBsetUseHyperTables\fP (\fBboolean\fP value)"
.br
.ti -1c
.RI "void * \fBSQLThread\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBboolean\fP \fBdebug\fP"
.br
.RI "whether to show debug messages "
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBDate\fP
.RS 4
Created on Mar 16, 2022 
.RE
.PP
\fBAuthor\fP
.RS 4
Attila Kovacs
.RE
.PP
SMA-X to SQL database logger configuration and API\&. 
.SH "Macro Definition Documentation"
.PP 
.SS "#define SMAXPQ_DEFAULT_CONFIG   '/etc/smax\-postgress\&.cfg'"

.PP
Default configuration file name\&. Chunk interval specification for hyper tables (Timescale DB)
.PP
For best performance it should be set s\&.t\&. chunks fill about 25% of the available memory\&.
.PP
For ~10k variables logged once per minute (assuming an average 8 bytes per variable plus table timestamp etc overheads), this may lead to ~0\&.5 GB per day\&.
.PP
The default is '3 days' 
.SS "#define SMAXPQ_VERSION_STRING"
The version string for this library 
.SH "Function Documentation"
.PP 
.SS "int deleteVars (const char * pattern)"
Deletes variables and metadata from the SQL DB, and removes them from the master table also\&.
.PP
\fBParameters\fP
.RS 4
\fIpattern\fP Glob variable name pattern 
.RE
.PP
\fBReturns\fP
.RS 4
The number of variables deleted from the SQL DB, or -1 if there was an error (errno will indicate the type of error)\&. 
.RE
.PP

.PP
References \fBMASTER_TABLE\fP\&.
.SS "void destroyVariable (\fBVariable\fP * u)"
Destroys a variable, freeing up the memory it occupies\&.
.PP
\fBParameters\fP
.RS 4
\fIu\fP Pointer to the variable\&. 
.RE
.PP

.PP
References \fBVariable::field\fP, \fBVariable::id\fP, \fBXField::name\fP, and \fBXField::value\fP\&.
.SS "\fBlogger_properties\fP * getLogProperties (const char * id)"
Returns the currently configured logging properties for an SMA-X variable\&.
.PP
\fBParameters\fP
.RS 4
\fIid\fP The aggregate name/ID of the SMA-X variable 
.RE
.PP
\fBReturns\fP
.RS 4
Pointer to the logging properties data structure, or NULL if there isn't one or if the id was NULL (errno will be set to EINVAL in case of the latter)\&. 
.RE
.PP

.SS "int getMaxLogSize ()"
Returns the maximum byte size for automatically logged variables, in their binary storage format\&. For variables that are sampled at some interval
.PP
\fBReturns\fP
.RS 4
(bytes) 
.RE
.PP

.SS "int getSampleCount (const \fBVariable\fP * u)"
Returns the number of samples that should be logged into the SQL database for a given SMA-X variable, which may be different from the element count of the variable by a configured downsampling factor\&.
.PP
\fBParameters\fP
.RS 4
\fIu\fP Pointer to the variable's data structure 
.RE
.PP
\fBReturns\fP
.RS 4
the number of samples that should be stored in the SQL database, or 0 if the argument was NULL\&. 
.RE
.PP

.PP
References \fBVariable::field\fP, \fBVariable::sampling\fP, and \fBxGetFieldCount()\fP\&.
.SS "const char * getSMAXServerAddress ()"
Returns the SMA-X server host name or IP address\&.
.PP
\fBReturns\fP
.RS 4
the host name or IP address of the SMA-X server
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetSMAXServerAddress()\fP 
.RE
.PP

.PP
References \fBSMAX_DEFAULT_HOSTNAME\fP\&.
.SS "int getSnapshotInterval ()"
Returns the currently configured snapshot interval\&. Snapshots will be taken in the regular update cycle, whenever the time since the last snapshot equals or exceeds the set interval\&. For example, if the update interval is '2m', and the snapshot interval is '11m', then snapshots will be generated at every 6th update cycle, that is at every 12 minutes\&.
.PP
\fBReturns\fP
.RS 4
(s) the currently configured snapshot interval\&. Values <=0 indicate that snapshots are disabled\&.
.RE
.PP
\fBSee also\fP
.RS 4
getUpdateUniterval() 
.RE
.PP

.SS "const char * getSQLAuth ()"
Returns the SQL database password to use when connecting to the database\&.
.PP
\fBReturns\fP
.RS 4
The password to use for logging into the SQL database, or NULL to use passwordless login
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetSQLAuth()\fP 
.RE
.PP

.SS "const char * getSQLDatabaseName ()"
Returns the SQL database to use when connecting to the database\&.
.PP
\fBReturns\fP
.RS 4
The database name to select for logging into the SQL server
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetSQLDatabaseName()\fP 
.RE
.PP

.PP
References \fBDEFAULT_SQL_DB\fP\&.
.SS "const char * getSQLServerAddress ()"
Returns the SQL server host name or IP address\&.
.PP
\fBReturns\fP
.RS 4
the host name or IP address of the SQL server
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetSQLServerAddress()\fP 
.RE
.PP

.PP
References \fBDEFAULT_SQL_SERVER\fP\&.
.SS "const char * getSQLUserName ()"
Returns the SQL user name to use when connecting to the database\&.
.PP
\fBReturns\fP
.RS 4
The username to use for logging into the SQL database
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetSQLUserName()\fP 
.RE
.PP

.PP
References \fBDEFAULT_SQL_USER\fP\&.
.SS "int getUpdateInterval ()"
Returns the currently configured update interval\&.
.PP
\fBReturns\fP
.RS 4
(s) the currently configured snapshot interval\&. Values <=0 indicate that snapshots are disabled\&.
.RE
.PP
\fBSee also\fP
.RS 4
getUpdateUniterval() 
.RE
.PP

.SS "int initCollector ()"
Initializes the SMA-X collector\&. It connects to SMA-X and starts a grabber thread in the background, which will be pushing data to the time-series database at regular intervals\&.
.PP
\fBReturns\fP
.RS 4
X_SUCCESS (0) if successful or else an error code (<0)\&. 
.RE
.PP

.PP
References \fBCONNECT_ATTEMPTS\fP, \fBCONNECT_RETRY_INTERVAL\fP, \fBdprintf\fP, \fBERROR_RETURN\fP, \fBFALSE\fP, \fBgetSMAXServerAddress()\fP, \fBsmaxConnect()\fP, \fBsmaxSetPipelined()\fP, \fBsmaxSetResilient()\fP, \fBsmaxSetResilientExit()\fP, \fBSUCCESS_RETURN\fP, \fBTRUE\fP, and \fBX_NO_SERVICE\fP\&.
.SS "int insertQueue (\fBVariable\fP * u)"
Add the variable to the queue for database insertion\&.
.PP
\fBParameters\fP
.RS 4
\fIu\fP Pointer to the variable data structure 
.RE
.PP
\fBReturns\fP
.RS 4
SUCCESS_RETURN (0) if successful, or else ERROR_RETURN (-1; errno will indicate the type of error)\&. 
.RE
.PP

.PP
References \fBERROR_RETURN\fP, \fBVariable::next\fP, and \fBSUCCESS_RETURN\fP\&.
.SS "int isLogging (const char * id, double updateTime)"
Checks if a given variable is to be logged into the SQL database
.PP
\fBParameters\fP
.RS 4
\fIid\fP The aggregate name/ID of the SMA-X variable 
.br
\fIupdateTime\fP (s) UNIX timestamp when the variable was last updated in the SMA-X database\&. 
.RE
.PP
\fBReturns\fP
.RS 4
TRUE (1) if the variable should be logged into the SQL database, or else FALSE (0) 
.RE
.PP

.PP
References \fBlogger_properties::exclude\fP, \fBFALSE\fP, \fBlogger_properties::force\fP, \fBgetLogProperties()\fP, \fBLOOKUP_INITIAL_CAPACITY\fP, and \fBTRUE\fP\&.
.SS "\fBboolean\fP isUseHyperTables ()"
Checks whether to use TimescaleDB hypertables\&. TimescaleDB is available for PostgreSQL only, so the setting will not affect other database backends\&.
.PP
\fBReturns\fP
.RS 4
TRUE (1) if to create hypertables for new variables, if possible, or else FALSE (0)\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBsetUseHyperTables()\fP 
.RE
.PP

.SS "int parseConfig (const char * filename)"
Pases settings from a specified configuration file
.PP
\fBParameters\fP
.RS 4
\fIfilename\fP the file name / path of the configuration to load\&. 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 (errno will indicate the type of error)\&. 
.RE
.PP

.PP
References \fBdprintf\fP, \fBFALSE\fP, \fBMIN_AGE\fP, \fBMIN_SIZE\fP, \fBMINUTE\fP, \fBsetSMAXServerAddress()\fP, \fBsetSQLAuth()\fP, \fBsetSQLDatabaseName()\fP, \fBsetSQLServerAddress()\fP, \fBsetSQLUserName()\fP, \fBTRUE\fP, and \fBX_SEP\fP\&.
.SS "int setSMAXServerAddress (const char * addr)"
Sets the SMA-X server address or IP\&.
.PP
\fBParameters\fP
.RS 4
\fIaddr\fP The host name or IP address of the SMA-X server 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if the name is NULL (errno will be set to EINVAL)
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetSMAXServerAddress()\fP 
.RE
.PP

.SS "int setSQLAuth (const char * passwd)"
Sets the SQL database password to use when connecting to the database\&.
.PP
\fBParameters\fP
.RS 4
\fIpasswd\fP The SQL database password to use 
.RE
.PP
\fBReturns\fP
.RS 4
0
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetSQLAuth()\fP 
.PP
\fBsetSQLDatabaseName()\fP 
.PP
\fBsetSQLUserName()\fP 
.PP
\fBsetSQLServerAddress()\fP 
.RE
.PP

.SS "int setSQLDatabaseName (const char * name)"
Sets the SQL database name to select when connecting to the SQL server\&.
.PP
\fBParameters\fP
.RS 4
\fIname\fP The SQL database name 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if the name is NULL (errno will be set to EINVAL)
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetSQLDatabaseName()\fP 
.PP
\fBsetSQLUserName()\fP 
.PP
\fBsetSQLAuth()\fP 
.PP
\fBsetSQLServerAddress()\fP 
.RE
.PP

.SS "int setSQLServerAddress (const char * addr)"
Sets the SQL server address or IP\&.
.PP
\fBParameters\fP
.RS 4
\fIaddr\fP The host name or IP address of the SQL server 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if the name is NULL (errno will be set to EINVAL)
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetSQLServerAddress()\fP 
.PP
\fBsetSQLDatabaseName()\fP 
.PP
\fBsetSQLUserName()\fP 
.PP
\fBsetSQLAuth()\fP 
.RE
.PP

.SS "int setSQLUserName (const char * name)"
Sets the SQL user name to use when connecting to the database\&.
.PP
\fBParameters\fP
.RS 4
\fIname\fP The SQL database user name 
.RE
.PP
\fBReturns\fP
.RS 4
0 if successful, or else -1 if the name is NULL (errno will be set to EINVAL)
.RE
.PP
\fBSee also\fP
.RS 4
\fBgetSQLUserName()\fP 
.PP
\fBsetSQLDatabaseName()\fP 
.PP
\fBsetSQLAuth()\fP 
.PP
\fBsetSQLServerAddress()\fP 
.RE
.PP

.SS "int setupDB (const char * owner, const char * passwd)"
Sets up (bootstraps) a clean new database
.PP
\fBParameters\fP
.RS 4
\fIowner\fP User that will own the database (it must have privileges for creating the database) 
.br
\fIpasswd\fP Password for oqner 
.RE
.PP
\fBReturns\fP
.RS 4
SUUCCESS_RETURN if successful, or else ERROR_RETURN\&. 
.RE
.PP

.PP
References \fBIDLE_STATE\fP\&.
.SS "void setUseHyperTables (\fBboolean\fP value)"
Sets whether to use TimescaleDB hypertables extension\&. TimescaleDB is available for PostgreSQL only, so the setting will not affect other database backends\&.
.PP
\fBParameters\fP
.RS 4
\fIvalue\fP TRUE (non-zero) to enable TimescaleDB hypertables\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBisUseHyperTables()\fP 
.RE
.PP

.SS "void * SQLThread ()"
The main processing thread, which pulls values from the queue and inserts them into the database asynchronously\&. It is started up by initialize();
.PP
\fBReturns\fP
.RS 4
NULL 
.RE
.PP

.PP
References \fBCONNECT_RETRY_ATTEMPTS\fP, \fBdestroyVariable()\fP, \fBERROR_EXIT\fP, \fBIDLE_STATE\fP, \fBMETA_NAME_PATTERN\fP, \fBVariable::next\fP, \fBSQL_TABLE_NAME_LEN\fP, \fBSUCCESS_RETURN\fP, and \fBTRUE\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for smax-postgres from the source code\&.
